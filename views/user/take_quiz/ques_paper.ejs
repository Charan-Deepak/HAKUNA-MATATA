<%- include('../../includes/user_home/take_quiz/header'); -%>
    <%- include('../../includes/user_home/take_quiz/sidebar'); -%>
        <%- include('../../includes/user_home/take_quiz/navbar'); -%>

        <style>
          /* Main fixed toolbox */
          .toolbox {
            position: fixed;
            top: 0;
            right: 0;
            width: 2rem;
            height: 93.5vh;
            background: rgba(0, 0, 0, 0.6);
            /* semi-black */
            box-shadow: -3px 0 8px rgba(0, 0, 0, 0.5);
            /* 3D/z-axis look */
            z-index: 1000;
            display: flex;
            flex-direction: column;
            align-items: center;
            overflow-y: auto;
            scrollbar-width: none;
            /* for Firefox */
          }
        
          .toolbox::-webkit-scrollbar {
            display: none;
            /* Chrome & Safari */
          }
        
          /* Inner scrollable button container */
          .toolbox-buttons {
            margin-top: 1rem;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            align-items: center;
          }
        
          /* Cartoon-style buttons */
          .cartoon-btn {
            width: 1.5rem;
            height: 1.5rem;
            background: #ffdb58;
            /* yellowish color */
            border: 2px solid #333;
            border-radius: 4px;
            box-shadow: 2px 2px 0px #222;
            font-weight: bold;
            font-size: 0.75rem;
            cursor: pointer;
            transition: all 0.2s ease;
          }
        
          .cartoon-btn:hover {
            transform: scale(1.1) rotate(-3deg);
            background-color: #ffe888;
            box-shadow: 3px 3px 0px #111;
          }  
          
          /* Flash effect when jumping to a form */
        .highlight-flash {
          animation: flashHighlight 1.5s ease;
          border: 2px solid #ffdb58; /* yellow border */
          box-shadow: 0 0 10px #ffdb58;
          border-radius: 6px;
        }

        @keyframes flashHighlight {
          0%   { background-color: #fff8dc; }
          50%  { background-color: #fff1a8; }
          100% { background-color: transparent; }
        }


        </style>

        <div class="questionblock" style="margin-top: 58px;padding: 25px 3rem 25px 265px;">

            <div class="toolbox mt-5 pt-1 pb-3">
              <div class="toolbox-buttons">
              </div>
            </div>

            <form class="main_form" id="main_form" action="/user/take_quiz/marks_page" method="post">
                <input type="hidden" name="answerData" id="answerData">
                <input type="hidden" name="quiz_code" id="quiz_code">
                <input type="hidden" name="message" id="message">
                <h3>
                    <b><div id="quiz_name" class="display-5" style=" text-transform: capitalize;"></div></b>
                    <hr>
                </h3>

                <!-- Tab Warning Modal -->
                <div class="modal fade" id="tabWarningModal" tabindex="-1" aria-labelledby="tabWarningModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content border-warning">
                            <div class="modal-header bg-warning text-dark">
                                <h5 class="modal-title" id="tabWarningModalLabel">Tab Switch Warning</h5>
                            </div>
                            <div class="modal-body">
                                <p id="tab-warning-text">You have only 1 chance left. After that, the quiz will be auto-submitted.</p>
                            </div>
                            <div class="modal-footer">
                                <button id="tab-ok-btn" type="button" class="btn btn-warning" data-bs-dismiss="modal">OK</button>
                            </div>
                        </div>
                    </div>
                </div>
  

                <div id="parent">
                    <pre id="copyText"style="cursor:pointer;"
                        class="border p-2"><div class="timer_div">Time remaining: <b><span id="timer"></span></b></div></b>Quiz Code: <b><span id="code"></span></b></pre>
                    <div id="message"></div> 
                </div>
                <button  class="btn btn-info done mb-4"  type="button" id="done" style="float: right; margin-left: 10px;" data-mdb-ripple-init >Submit</button>
                <!-- <button type="submit" id="submit" class="btn btn-dark submit" style="float: right; margin-right: 10px;" data-mdb-ripple-init>submit</button>  -->
            </form> 
        </div>
<script>

    // Extract the query parameter from the URL
    // const params = new URLSearchParams(window.location.search);//to get the test code from admin_question_new
    //const user_name=params.get('user_name');
    const message = JSON.parse('<%- test%>');
    let message_length = message.form.length
    
    // Display the message wherever needed in your HTML
    document.getElementById('code').textContent ='<%=quiz_code%>';
    document.getElementById('quiz_name').textContent =message.quiz_name;

    let total_marks=0;
    let mark_to_student=0;

    async function testpaper(){
        const div=document.createElement("div");
        div.id="question";

        for(let i=0;i<message_length;i++){
            const form=document.createElement("form");//creating form 
            form.className="form"+i;//i is for different forms of class name like form1,form2...
            form.style.padding="1rem";
            form.style.margin="1rem";
            total_marks=total_marks+message.form[i].marks;

            if(message.form[i].type==3){
            form.innerHTML=`
                <div id="question${i + 1}" style="margin-bottom: 1rem;">
                
                      <div class="text-end" style="font-weight: bold; color: #555; margin-bottom: 0.25rem;">
                        Marks: ${JSON.stringify(message.form[i].marks).replace(/"/g, '')}
                      </div>
                      
                      <h5 id="question${i + 1}_p" style="text-transform: capitalize; margin: 0 0 0.5rem 0;">
                        ${i+1}. ${JSON.stringify(message.form[i].text).replace(/"/g, '')}
                      </h5>
                      
                      <div class="input-group mb-3">
                    <span class="input-group-text" id="basic-addon1">A.</span>
                    <input
                      type="text"
                      class="form-control"
                      aria-label="Username"
                      aria-describedby="basic-addon1"
                      id="option_type_text${i}"
                      style="max-width: 300px;"
                    />
                  </div>
                
                  
                </div>
            `}else if(message.form[i].type==1){
                form.innerHTML=`
                <div id="question${i + 1}" style="margin-bottom: 1.5rem;">
  
                  <div class="text-end" style="font-weight: bold; color: #555; margin-bottom: 0.25rem;">
                    Marks: ${JSON.stringify(message.form[i].marks).replace(/"/g, '')}
                  </div>
                  
                  <h5 id="question${i + 1}_p" style="text-transform: capitalize;margin: 0 0 0.5rem 0;">
                    ${i+1}. ${JSON.stringify(message.form[i].text).replace(/"/g, '')}
                  </h5>

                  <div style="margin-left: 1rem;">
                    
                    <div class="form-check">
                      <input class="form-check-input" type="radio" name="correct${i}" id="option1${i}" value="1">
                      <label class="form-check-label" for="option1${i}">
                        ${JSON.stringify(message.form[i].option1[0]).replace(/"/g, '')}
                      </label>
                    </div>
                    
                    <div class="form-check">
                      <input class="form-check-input" type="radio" name="correct${i}" id="option2${i}" value="2">
                      <label class="form-check-label" for="option2${i}">
                        ${JSON.stringify(message.form[i].option1[1]).replace(/"/g, '')}
                      </label>
                    </div>
                    
                    <div class="form-check">
                      <input class="form-check-input" type="radio" name="correct${i}" id="option3${i}" value="3">
                      <label class="form-check-label" for="option3${i}">
                        ${JSON.stringify(message.form[i].option1[2]).replace(/"/g, '')}
                      </label>
                    </div>
                    
                    <div class="form-check">
                      <input class="form-check-input" type="radio" name="correct${i}" id="option4${i}" value="4">
                      <label class="form-check-label" for="option4${i}">
                        ${JSON.stringify(message.form[i].option1[3]).replace(/"/g, '')}
                      </label>
                    </div>

                  </div>

              </div>`
            }else if(message.form[i].type==2){
                form.innerHTML=`
                <div id="question${i+1}">
  
                  <div class="text-end" style="font-weight: bold; color: #555; margin-bottom: 0.25rem;">
                    Marks: ${JSON.stringify(message.form[i].marks).replace(/"/g, '')}
                  </div>
                  
                  <h5 id="question${i + 1}_p" style="text-transform: capitalize;margin: 0 0 0.5rem 0;">
                    ${i+1}. ${JSON.stringify(message.form[i].text).replace(/"/g, '')}
                  </h5>

  <div class="form-check">
    <input class="form-check-input" type="checkbox" id="option_checkbox1${i}" name="correct_checkboxes1${i}" value="1">
    <label class="form-check-label" for="option_checkbox1${i}">
      ${JSON.stringify(message.form[i].option1[0]).replace(/"/g, '')}
    </label>
  </div>

  <div class="form-check">
    <input class="form-check-input" type="checkbox" id="option_checkbox2${i}" name="correct_checkboxes2${i}" value="2">
    <label class="form-check-label" for="option_checkbox2${i}">
      ${JSON.stringify(message.form[i].option1[1]).replace(/"/g, '')}
    </label>
  </div>

  <div class="form-check">
    <input class="form-check-input" type="checkbox" id="option_checkbox3${i}" name="correct_checkboxes3${i}" value="3">
    <label class="form-check-label" for="option_checkbox3${i}">
      ${JSON.stringify(message.form[i].option1[2]).replace(/"/g, '')}
    </label>
  </div>

  <div class="form-check">
    <input class="form-check-input" type="checkbox" id="option_checkbox4${i}" name="correct_checkboxes4${i}" value="4">
    <label class="form-check-label" for="option_checkbox4${i}">
      ${JSON.stringify(message.form[i].option1[3]).replace(/"/g, '')}
    </label>
  </div>

              </div> `
            }

            div.appendChild(form);//adding the inside of div
            window['form' + i] = form;

            //  Create toolbox nav button
            const nav_button = document.createElement('button');
            nav_button.classList.add("cartoon-btn", `step-${i}`);
            nav_button.innerText = i + 1;

            const tool_button = document.querySelector(".toolbox-buttons");
            tool_button.appendChild(nav_button);

            //  Now bind event
            document.querySelector(`.step-${i}`).addEventListener("click", function () {
              const targetForm = document.querySelector(`.form${i}`);
              console.log(`Trying to scroll to .form${i}:`, targetForm);

              if (targetForm) {
                targetForm.scrollIntoView({ behavior: "smooth", block: "center" });
                targetForm.classList.add("highlight-flash");
                setTimeout(() => {
                  targetForm.classList.remove("highlight-flash");
                }, 1500);
              } else {
                console.error(`.form${i} not found in DOM!`);
              }
            });

            
        }
        // Find the parent div
        const parentDiv = document.getElementById('parent');

        // Find the reference div (the one after which you want to append the new div)
        const referenceDiv = parentDiv.children[1]; // Index 1 refers to the second child div

        // Insert the new div after the reference div
        parentDiv.insertBefore(div, referenceDiv.nextSibling);
    
    }
    window.onload = async function () {
            //openFullscreen()
            await testpaper();
    };

    var answerData = []; // Array to store answer data

    function submit_form(j) {
        var text_answers_checkbox = [];
        var text_a;
        var option_correct_radio;
        var mark=0;
        // Accessing the form
        var final_form = window["form" + j];
        if (final_form) { // If form exists

            //let option_type_read = final_form.querySelector(`input[name='option${j}']:checked`);
            var option_type = message.form[j].type;
    
            if (option_type == 1) {
                // Add event listeners to each radio button
                let radioBtns = final_form.querySelectorAll(`input[name='correct${j}']`);
    
                // Define a function to find the selected radio button
                let findSelected = () => {
                    let selected = final_form.querySelector(`input[name='correct${j}']:checked`);
                    if (selected) {
                        option_correct_radio = selected.value;
                    } else {
                        option_correct_radio = ""; // Handle case where no radio button is checked
                    }

                    if(parseInt(option_correct_radio)==message.form[j].correct_answer){
                        mark_to_student+=message.form[j].marks;
                        mark=message.form[j].marks;
                    }
                };
    
                // Add event listeners to each radio button
                radioBtns.forEach(radioBtn => {
                    radioBtn.addEventListener("change", findSelected);
                });
    
                // Call the function initially to set the default value
                findSelected();
            } else if (option_type == 2) {
                // Get options for checkbox type
                var count=0;
                var wrong=false;
                for (var k = 0; k < 4; k++) {
                    let option_answer = final_form.querySelector(`input[name='correct_checkboxes${k+1}${j}']:checked`); // Corrected selector syntax
                    if (option_answer) {
                        text_answers_checkbox.push(option_answer.value);
                        if(message.form[j].option1_answer_checkbox.includes(parseInt(option_answer.value))){
                            count++;
                        }else{
                            wrong=true;// selected something that’s not correct
                        }
                      }
                }
                    if(!wrong&&count==message.form[j].option1_answer_checkbox.length)
                    {mark_to_student+=message.form[j].marks;
                       mark= message.form[j].marks
                    }
                    else if(count>0 && count<message.form[j].option1_answer_checkbox.length && !wrong){
                         mark_to_student+=Math.ceil(message.form[j].marks*(count/message.form[j].option1_answer_checkbox.length));
                         mark=Math.ceil(message.form[j].marks*(count/message.form[j].option1_answer_checkbox.length));
                    }

            } else if (option_type == 3) {
    
                text_a = final_form.querySelector("#option_type_text" + j)?final_form.querySelector("#option_type_text" + j).value:""; // Get text answer
                if(text_a.toLowerCase() === message.form[j].text_answer.toLowerCase()){
                    mark_to_student+=message.form[j].marks;
                    mark=message.form[j].marks;
                }
            }

            // Construct data object
            var data = {
                mark:mark,
                type: parseInt(option_type), // radio, checkbox, text
                option1_answer_checkbox: text_answers_checkbox,
                correct_answer: parseInt(option_correct_radio),
                text_answer: text_a
            };
    
            answerData.push(data); // Push data object to productData array
        }
    
    }
    
    async function done() {
        // Display an alert
       //alert("Are you sure you want to submit the form?");
       for (var j = 0; j < message_length; j++) {
            await submit_form(j); //control to sumbit the form
        }
        answerData.push(total_marks);
        answerData.push(mark_to_student);
       // console.log("hello");
        const quiz_code='<%=quiz_code%>';
        document.getElementById("answerData").value = JSON.stringify(answerData);
        document.getElementById("quiz_code").value = quiz_code;
        document.getElementById("message").value = JSON.stringify(message);
        const form=document.getElementById('main_form');
        form.submit();

    };

    //timer
    let timerInterval; // Declare globally

    document.addEventListener('DOMContentLoaded', async function () {
        const timerDisplay = document.getElementById('timer');
        let timeRemaining = Math.floor((new Date("<%= end_time.toISOString() %>") - new Date()) / 1000);

        if(message.time==0){
            document.querySelector('.timer_div').style.display = 'none';
        }else if (timeRemaining != 0) {
            timerInterval = setInterval(updateTimer, 1000); // Assign to global

            async function updateTimer() {
                const hours = Math.floor(timeRemaining / (60 * 60));
                const minutes = Math.floor((timeRemaining % (60 * 60)) / 60);
                const seconds = ((timeRemaining % (60 * 60)) % 60);
                const timerText = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                timerDisplay.textContent = `${timerText}`;

                if (timeRemaining <= 0) {
                    clearInterval(timerInterval);
                    await done();
                }
                timeRemaining--;
            }
        }
    });

    // Now this works correctly
    document.querySelector('.done').addEventListener("click", async function () {
        clearInterval(timerInterval); //  Works now
        await done();
    });
    
    let tab_cnt = 0;
        let shouldSubmitOnOk = false;

        document.addEventListener("visibilitychange", function () {
            if (document.hidden) {
                tab_cnt++;

                const warningText = document.getElementById("tab-warning-text");
                const modal = new bootstrap.Modal(document.getElementById('tabWarningModal'));
                const okButton = document.getElementById('tab-ok-btn');

                if (tab_cnt === 1) {
                    warningText.innerText = "You have only 1 chance left. After that, if you switch tabs or minimiz the window the quiz will be auto-submitted.";
                    shouldSubmitOnOk = false;
                } else if (tab_cnt === 2) {
                    warningText.innerText = "No chances left. Clicking OK will submit the quiz.";
                    shouldSubmitOnOk = true;
                }

                modal.show();

                // Attach only once (important!)
                okButton.onclick = async function () {
                    if (shouldSubmitOnOk) {
                        clearInterval(timerInterval);
                        await done();
                    }
                };
            }
        });


        
 </script>
<%- include('../../partials/mdbfooter'); -%>
<%- include('../../partials/footer') -%>
